// Code generated by MockGen. DO NOT EDIT.
// Source: gophermart/internal/core/ports (interfaces: UserStore,OrderStore,WithdrawnStore)

// Package ports is a generated GoMock package.
package ports

import (
	context "context"
	domain "gophermart/internal/core/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserStore is a mock of UserStore interface.
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore.
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance.
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// AddNewUser mocks base method.
func (m *MockUserStore) AddNewUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewUser indicates an expected call of AddNewUser.
func (mr *MockUserStoreMockRecorder) AddNewUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewUser", reflect.TypeOf((*MockUserStore)(nil).AddNewUser), arg0, arg1, arg2)
}

// GetUser mocks base method.
func (m *MockUserStore) GetUser(arg0 context.Context, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserStore)(nil).GetUser), arg0, arg1)
}

// MockOrderStore is a mock of OrderStore interface.
type MockOrderStore struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStoreMockRecorder
}

// MockOrderStoreMockRecorder is the mock recorder for MockOrderStore.
type MockOrderStoreMockRecorder struct {
	mock *MockOrderStore
}

// NewMockOrderStore creates a new mock instance.
func NewMockOrderStore(ctrl *gomock.Controller) *MockOrderStore {
	mock := &MockOrderStore{ctrl: ctrl}
	mock.recorder = &MockOrderStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStore) EXPECT() *MockOrderStoreMockRecorder {
	return m.recorder
}

// AddNewOrder mocks base method.
func (m *MockOrderStore) AddNewOrder(arg0 context.Context, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewOrder indicates an expected call of AddNewOrder.
func (mr *MockOrderStoreMockRecorder) AddNewOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewOrder", reflect.TypeOf((*MockOrderStore)(nil).AddNewOrder), arg0, arg1, arg2)
}

// GetAllNotFinished mocks base method.
func (m *MockOrderStore) GetAllNotFinished(arg0 context.Context) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotFinished", arg0)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotFinished indicates an expected call of GetAllNotFinished.
func (mr *MockOrderStoreMockRecorder) GetAllNotFinished(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotFinished", reflect.TypeOf((*MockOrderStore)(nil).GetAllNotFinished), arg0)
}

// GetAllOrders mocks base method.
func (m *MockOrderStore) GetAllOrders(arg0 context.Context, arg1 int) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", arg0, arg1)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderStoreMockRecorder) GetAllOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderStore)(nil).GetAllOrders), arg0, arg1)
}

// GetOrder mocks base method.
func (m *MockOrderStore) GetOrder(arg0 context.Context, arg1 string) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderStoreMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderStore)(nil).GetOrder), arg0, arg1)
}

// UpdateOrders mocks base method.
func (m *MockOrderStore) UpdateOrders(arg0 context.Context, arg1 []domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrders", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrders indicates an expected call of UpdateOrders.
func (mr *MockOrderStoreMockRecorder) UpdateOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrders", reflect.TypeOf((*MockOrderStore)(nil).UpdateOrders), arg0, arg1)
}

// MockWithdrawnStore is a mock of WithdrawnStore interface.
type MockWithdrawnStore struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawnStoreMockRecorder
}

// MockWithdrawnStoreMockRecorder is the mock recorder for MockWithdrawnStore.
type MockWithdrawnStoreMockRecorder struct {
	mock *MockWithdrawnStore
}

// NewMockWithdrawnStore creates a new mock instance.
func NewMockWithdrawnStore(ctrl *gomock.Controller) *MockWithdrawnStore {
	mock := &MockWithdrawnStore{ctrl: ctrl}
	mock.recorder = &MockWithdrawnStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawnStore) EXPECT() *MockWithdrawnStoreMockRecorder {
	return m.recorder
}

// AddNewWithdrawn mocks base method.
func (m *MockWithdrawnStore) AddNewWithdrawn(arg0 context.Context, arg1 string, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewWithdrawn", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewWithdrawn indicates an expected call of AddNewWithdrawn.
func (mr *MockWithdrawnStoreMockRecorder) AddNewWithdrawn(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewWithdrawn", reflect.TypeOf((*MockWithdrawnStore)(nil).AddNewWithdrawn), arg0, arg1, arg2, arg3)
}

// GetAllWithdrawals mocks base method.
func (m *MockWithdrawnStore) GetAllWithdrawals(arg0 context.Context, arg1 int) ([]domain.Withdrawn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithdrawals", arg0, arg1)
	ret0, _ := ret[0].([]domain.Withdrawn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithdrawals indicates an expected call of GetAllWithdrawals.
func (mr *MockWithdrawnStoreMockRecorder) GetAllWithdrawals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithdrawals", reflect.TypeOf((*MockWithdrawnStore)(nil).GetAllWithdrawals), arg0, arg1)
}
